# Default values for smm-architect
# This is a YAML-formatted file

global:
  imageRegistry: ""
  imagePullSecrets: []
  
image:
  registry: docker.io
  repository: smm-architect
  pullPolicy: IfNotPresent
  tag: "latest"

replicaCount:
  coreService: 3
  toolhub: 2
  frontend: 2
  modelRouter: 3
  publisher: 2
  agents: 2

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault
  supplementalGroups: []

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

# Health and readiness probes
probes:
  coreService:
    livenessProbe:
      httpGet:
        path: /health
        port: 4000
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /health
        port: 4000
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
    startupProbe:
      httpGet:
        path: /health
        port: 4000
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 30
  toolhub:
    livenessProbe:
      httpGet:
        path: /health
        port: 3001
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /health
        port: 3001
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
    startupProbe:
      httpGet:
        path: /health
        port: 3001
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 30
  frontend:
    livenessProbe:
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
    startupProbe:
      httpGet:
        path: /api/health
        port: 3000
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 30
  modelRouter:
    livenessProbe:
      httpGet:
        path: /health
        port: 3003
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /health
        port: 3003
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
    startupProbe:
      httpGet:
        path: /health
        port: 3003
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 30
  publisher:
    livenessProbe:
      httpGet:
        path: /health
        port: 3004
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /health
        port: 3004
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
    startupProbe:
      httpGet:
        path: /health
        port: 3004
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 30
  agents:
    livenessProbe:
      httpGet:
        path: /health
        port: 3005
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /health
        port: 3005
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
    startupProbe:
      httpGet:
        path: /health
        port: 3005
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 30

service:
  type: ClusterIP
  ports:
    coreService: 4000
    toolhub: 3001
    frontend: 3000
    modelRouter: 3002
    publisher: 3003
    agents: 3004

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: api.smm-architect.com
      paths:
        - path: /
          pathType: Prefix
          service: core-service
    - host: toolhub.smm-architect.com
      paths:
        - path: /
          pathType: Prefix
          service: toolhub
    - host: app.smm-architect.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
  tls:
    - secretName: smm-architect-tls
      hosts:
        - api.smm-architect.com
        - toolhub.smm-architect.com
        - app.smm-architect.com

resources:
  coreService:
    limits:
      cpu: 1000m
      memory: 2Gi
      ephemeral-storage: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
      ephemeral-storage: 1Gi
  toolhub:
    limits:
      cpu: 2000m
      memory: 4Gi
      ephemeral-storage: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
      ephemeral-storage: 2Gi
  frontend:
    limits:
      cpu: 500m
      memory: 1Gi
      ephemeral-storage: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
      ephemeral-storage: 512Mi
  modelRouter:
    limits:
      cpu: 2000m
      memory: 4Gi
      ephemeral-storage: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
      ephemeral-storage: 2Gi
  publisher:
    limits:
      cpu: 3000m
      memory: 6Gi
      ephemeral-storage: 6Gi
    requests:
      cpu: 1000m
      memory: 2Gi
      ephemeral-storage: 2Gi
  agents:
    limits:
      cpu: 4000m
      memory: 8Gi
      ephemeral-storage: 8Gi
    requests:
      cpu: 2000m
      memory: 4Gi
      ephemeral-storage: 4Gi

autoscaling:
  enabled: true
  coreService:
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Percent
          value: 50
          periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
  toolhub:
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  frontend:
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  modelRouter:
    minReplicas: 3
    maxReplicas: 12
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  publisher:
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  agents:
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Pod Disruption Budgets
podDisruptionBudget:
  enabled: true
  coreService:
    minAvailable: 1
  toolhub:
    minAvailable: 1
  frontend:
    minAvailable: 1
  modelRouter:
    minAvailable: 2
  publisher:
    minAvailable: 1
  agents:
    minAvailable: 1

nodeSelector: {}

tolerations: []

affinity: {}

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "smm_password"
    username: "smm_user"
    password: "smm_password"
    database: "smm_architect"
  primary:
    persistence:
      enabled: true
      size: 20Gi
  metrics:
    enabled: true

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis_password"
  master:
    persistence:
      enabled: true
      size: 5Gi
  metrics:
    enabled: true

# Monitoring configuration
monitoring:
  prometheus:
    enabled: true
  grafana:
    enabled: true
    adminPassword: "admin_password"

# External secrets (set these in production)
secrets:
  databaseUrl: "postgresql://smm_user:smm_password@smm-architect-postgresql:5432/smm_architect"
  redisUrl: "redis://smm-architect-redis-master:6379"
  sentryDsn: ""
  openaiApiKey: ""
  anthropicApiKey: ""
  jwtSecret: ""
  encryptionKey: ""
  vaultToken: ""
  linkedinClientId: ""
  linkedinClientSecret: ""
  twitterApiKey: ""
  twitterApiSecret: ""
  twitterBearerToken: ""
  facebookAppId: ""
  facebookAppSecret: ""
  instagramAppId: ""
  instagramAppSecret: ""
  tiktokClientKey: ""
  tiktokClientSecret: ""
  awsAccessKeyId: ""
  awsSecretAccessKey: ""
  awsS3Bucket: ""

# Environment configuration
environment:
  nodeEnv: "production"
  logLevel: "info"
  sentryEnvironment: "production"