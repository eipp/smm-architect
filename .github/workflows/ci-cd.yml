name: SMM Architect CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pipeline stages: build test deploy
  # BUILD STAGE: Test and Build
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Run linting
      run: pnpm run lint
    
    - name: Run tests
      run: pnpm run test
      env:
        NODE_ENV: test
    
    - name: Run security audit
      run: pnpm audit --audit-level=moderate

  # BUILD STAGE: Container Build
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service:
          - name: smm-architect
            path: services/smm-architect
          - name: model-router
            path: services/model-router
          - name: publisher
            path: services/publisher
          - name: toolhub
            path: services/toolhub
          - name: frontend
            path: apps/frontend
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.path }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # TEST STAGE: Security Scanning
  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [smm-architect, model-router, publisher, toolhub, frontend]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # DEPLOY STAGE: Staging Deployment
  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to EKS Staging
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name smm-architect-staging
        kubectl set env deployment/smm-architect-service IMAGE_TAG=${{ github.sha }}
        kubectl set env deployment/model-router-service IMAGE_TAG=${{ github.sha }}
        kubectl set env deployment/publisher-service IMAGE_TAG=${{ github.sha }}
        kubectl set env deployment/toolhub-service IMAGE_TAG=${{ github.sha }}
        kubectl set env deployment/frontend-service IMAGE_TAG=${{ github.sha }}
        kubectl rollout restart deployment/smm-architect-service
        kubectl rollout restart deployment/model-router-service
        kubectl rollout restart deployment/publisher-service
        kubectl rollout restart deployment/toolhub-service
        kubectl rollout restart deployment/frontend-service

  # DEPLOY STAGE: Production Deployment
  deploy-production:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to EKS Production
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name smm-architect-production
        kubectl set env deployment/smm-architect-service IMAGE_TAG=${{ github.sha }}
        kubectl set env deployment/model-router-service IMAGE_TAG=${{ github.sha }}
        kubectl set env deployment/publisher-service IMAGE_TAG=${{ github.sha }}
        kubectl set env deployment/toolhub-service IMAGE_TAG=${{ github.sha }}
        kubectl set env deployment/frontend-service IMAGE_TAG=${{ github.sha }}
        kubectl rollout restart deployment/smm-architect-service
        kubectl rollout restart deployment/model-router-service
        kubectl rollout restart deployment/publisher-service
        kubectl rollout restart deployment/toolhub-service
        kubectl rollout restart deployment/frontend-service
        
        # Wait for rollout to complete
        kubectl rollout status deployment/smm-architect-service --timeout=300s
        kubectl rollout status deployment/model-router-service --timeout=300s
        kubectl rollout status deployment/publisher-service --timeout=300s
        kubectl rollout status deployment/toolhub-service --timeout=300s
        kubectl rollout status deployment/frontend-service --timeout=300s

  post-deployment-tests:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run E2E tests
      run: |
        pnpm install
        pnpm run test:e2e
      env:
        TEST_URL: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}
        
    - name: Run health checks
      run: |
        curl -f ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}/health
        curl -f ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}/api/health

  notification:
    needs: [deploy-staging, deploy-production, post-deployment-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow