name: SBOM Generation and Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC to catch new vulnerabilities
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Scan depth level'
        required: true
        default: 'full'
        type: choice
        options:
          - 'quick'
          - 'full'
          - 'deep'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  security-events: write
  id-token: write
  attestations: write

jobs:
  sbom-generation:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        
    - name: Install SBOM tools
      run: |
        # Install Syft for SBOM generation
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install Grype for vulnerability scanning
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install Cosign for attestation signing
        curl -sL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/local/bin/cosign
        chmod +x /usr/local/bin/cosign

    - name: Generate SBOM for source code
      run: |
        mkdir -p sbom/source
        
        # Generate SBOM for main service
        syft dir:services/smm-architect \
          --output cyclonedx-json \
          --file sbom/source/smm-architect-source.json
        
        # Generate SBOM for DSR service
        syft dir:services/dsr \
          --output cyclonedx-json \
          --file sbom/source/dsr-service-source.json
        
        # Generate SBOM for frontend
        syft dir:apps/frontend \
          --output cyclonedx-json \
          --file sbom/source/frontend-source.json
        
        # Generate SBOM for shared libraries
        syft dir:services/shared \
          --output cyclonedx-json \
          --file sbom/source/shared-libs-source.json

    - name: Run comprehensive SBOM generation
      run: |
        chmod +x tools/scripts/generate-sbom.sh
        tools/scripts/generate-sbom.sh
      env:
        SBOM_STORAGE_BUCKET: ${{ secrets.SBOM_STORAGE_BUCKET }}

    - name: Verify license compliance
      run: tools/scripts/verify-license-compliance.sh

    - name: Vulnerability scanning with Grype
      run: |
        mkdir -p sbom/vulnerabilities
        
        # Scan each SBOM for vulnerabilities
        for sbom_file in sbom/services/*.json; do
          if [ -f "$sbom_file" ]; then
            service_name=$(basename "$sbom_file" .json | sed 's/-sbom$//')
            echo "Scanning vulnerabilities for $service_name..."
            
            grype sbom:"$sbom_file" \
              --output json \
              --file "sbom/vulnerabilities/${service_name}-vulnerabilities.json" || true
              
            grype sbom:"$sbom_file" \
              --output sarif \
              --file "sbom/vulnerabilities/${service_name}-vulnerabilities.sarif" || true
          fi
        done

    - name: Upload vulnerability results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: sbom/vulnerabilities/
        category: dependency-vulnerabilities
      continue-on-error: true

    - name: Generate security summary
      run: |
        echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        total_critical=0
        total_high=0
        total_medium=0
        total_low=0
        
        for vuln_file in sbom/vulnerabilities/*-vulnerabilities.json; do
          if [ -f "$vuln_file" ]; then
            service=$(basename "$vuln_file" | sed 's/-vulnerabilities.json$//')
            
            critical=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' "$vuln_file" 2>/dev/null || echo "0")
            high=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' "$vuln_file" 2>/dev/null || echo "0")
            medium=$(jq '[.matches[] | select(.vulnerability.severity == "Medium")] | length' "$vuln_file" 2>/dev/null || echo "0")
            low=$(jq '[.matches[] | select(.vulnerability.severity == "Low")] | length' "$vuln_file" 2>/dev/null || echo "0")
            
            total_critical=$((total_critical + critical))
            total_high=$((total_high + high))
            total_medium=$((total_medium + medium))
            total_low=$((total_low + low))
            
            echo "## $service" >> $GITHUB_STEP_SUMMARY
            echo "- 🔴 Critical: $critical" >> $GITHUB_STEP_SUMMARY
            echo "- 🟠 High: $high" >> $GITHUB_STEP_SUMMARY
            echo "- 🟡 Medium: $medium" >> $GITHUB_STEP_SUMMARY
            echo "- 🟢 Low: $low" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "## 📊 Total Summary" >> $GITHUB_STEP_SUMMARY
        echo "- 🔴 Total Critical: $total_critical" >> $GITHUB_STEP_SUMMARY
        echo "- 🟠 Total High: $total_high" >> $GITHUB_STEP_SUMMARY
        echo "- 🟡 Total Medium: $total_medium" >> $GITHUB_STEP_SUMMARY
        echo "- 🟢 Total Low: $total_low" >> $GITHUB_STEP_SUMMARY

    - name: Check vulnerability thresholds
      run: |
        # Fail the build if critical vulnerabilities are found
        total_critical=0
        total_high=0
        
        for vuln_file in sbom/vulnerabilities/*-vulnerabilities.json; do
          if [ -f "$vuln_file" ]; then
            critical=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' "$vuln_file" 2>/dev/null || echo "0")
            high=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' "$vuln_file" 2>/dev/null || echo "0")
            
            total_critical=$((total_critical + critical))
            total_high=$((total_high + high))
          fi
        done
        
        echo "Found $total_critical critical and $total_high high severity vulnerabilities"
        
        if [ $total_critical -gt 0 ]; then
          echo "❌ SECURITY GATE FAILED: Critical vulnerabilities found"
          echo "Please address all critical vulnerabilities before proceeding"
          exit 1
        fi
        
        if [ $total_high -gt 5 ]; then
          echo "⚠️ WARNING: More than 5 high severity vulnerabilities found ($total_high)"
          echo "Consider addressing high severity vulnerabilities"
        fi
        
        echo "✅ Security gate passed"

    - name: Generate attestation
      run: |
        # Create attestation data
        cat > sbom/attestation.json << EOF
        {
          "attestation_type": "SBOM Generation",
          "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "workflow": "${{ github.workflow }}",
          "actor": "${{ github.actor }}",
          "tools": {
            "syft": "$(syft version --output json | jq -r .version)",
            "grype": "$(grype version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)"
          },
          "components_scanned": $(find sbom/services -name "*.json" | wc -l),
          "vulnerabilities_found": {
            "critical": $(find sbom/vulnerabilities -name "*.json" -exec jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}'),
            "high": $(find sbom/vulnerabilities -name "*.json" -exec jq '[.matches[] | select(.vulnerability.severity == "High")] | length' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}'),
            "medium": $(find sbom/vulnerabilities -name "*.json" -exec jq '[.matches[] | select(.vulnerability.severity == "Medium")] | length' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}'),
            "low": $(find sbom/vulnerabilities -name "*.json" -exec jq '[.matches[] | select(.vulnerability.severity == "Low")] | length' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
          }
        }
        EOF

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: |
          sbom/
          !sbom/**/*.tmp
        retention-days: 90

    - name: Comment PR with SBOM summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read vulnerability summary
          let summary = "## 🛡️ SBOM & Security Scan Results\n\n";
          
          try {
            const attestation = JSON.parse(fs.readFileSync('sbom/attestation.json', 'utf8'));
            const vulns = attestation.vulnerabilities_found;
            
            summary += `### Components Scanned: ${attestation.components_scanned}\n\n`;
            summary += "### Vulnerability Summary:\n";
            summary += `- 🔴 Critical: ${vulns.critical}\n`;
            summary += `- 🟠 High: ${vulns.high}\n`;
            summary += `- 🟡 Medium: ${vulns.medium}\n`;
            summary += `- 🟢 Low: ${vulns.low}\n\n`;
            
            if (vulns.critical > 0) {
              summary += "❌ **SECURITY GATE FAILED**: Critical vulnerabilities found\n";
            } else if (vulns.high > 5) {
              summary += "⚠️ **WARNING**: High number of high-severity vulnerabilities\n";
            } else {
              summary += "✅ **Security gate passed**\n";
            }
            
            summary += "\n📋 Complete SBOM and vulnerability reports are available in the workflow artifacts.";
            
          } catch (error) {
            summary += "⚠️ Unable to read vulnerability summary\n";
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  docker-sbom:
    name: Generate Docker Image SBOMs
    runs-on: ubuntu-latest
    needs: sbom-generation
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Build Docker images
      run: |
        # Build images for SBOM scanning
        docker build -t smm-architect:latest services/smm-architect/
        docker build -t dsr-service:latest services/dsr/

    - name: Generate Docker image SBOMs
      run: |
        mkdir -p docker-sbom
        
        # Generate SBOMs for Docker images
        syft packages docker:smm-architect:latest \
          --output cyclonedx-json \
          --file docker-sbom/smm-architect-image.json
        
        syft packages docker:dsr-service:latest \
          --output cyclonedx-json \
          --file docker-sbom/dsr-service-image.json

    - name: Upload Docker SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-sbom-${{ github.sha }}
        path: docker-sbom/
        retention-days: 90

  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [sbom-generation, docker-sbom]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: sbom/

    - name: Download Docker SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        name: docker-sbom-${{ github.sha }}
        path: docker-sbom/
      continue-on-error: true

    - name: Generate compliance report
      run: |
        mkdir -p compliance-report
        
        cat > compliance-report/supply-chain-compliance.json << EOF
        {
          "report_type": "Supply Chain Security Compliance",
          "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "workflow_run_id": "${{ github.run_id }}",
          "compliance_frameworks": {
            "NIST_SSDF": {
              "implemented": true,
              "practices_covered": [
                "PO.1.1: Define and use naming and numbering schemes",
                "PO.3.2: Implement and maintain SBOM processes",
                "PS.1.1: Use secure coding practices",
                "PS.3.1: Archive and protect software",
                "PW.4.1: Audit the software"
              ]
            },
            "SLSA": {
              "level": 2,
              "requirements_met": [
                "Source integrity",
                "Build service",
                "Provenance available",
                "Provenance authenticated"
              ]
            },
            "NTIA_SBOM": {
              "minimum_elements": true,
              "elements_included": [
                "Supplier name",
                "Component name",
                "Version of component",
                "Other unique identifiers",
                "Dependency relationships",
                "Author of SBOM data",
                "Timestamp"
              ]
            }
          },
          "artifacts_generated": {
            "source_sboms": $(find sbom/services -name "*.json" 2>/dev/null | wc -l),
            "container_sboms": $(find docker-sbom -name "*.json" 2>/dev/null | wc -l),
            "vulnerability_reports": $(find sbom/vulnerabilities -name "*.json" 2>/dev/null | wc -l),
            "attestations": $(find sbom -name "attestation.json" 2>/dev/null | wc -l)
          },
          "next_scan_due": "$(date -u -d '+7 days' +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF

    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report-${{ github.sha }}
        path: compliance-report/
        retention-days: 365

    - name: Create release assets (on main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        # Create comprehensive archive for release
        tar -czf sbom-complete-${{ github.sha }}.tar.gz \
          sbom/ \
          docker-sbom/ \
          compliance-report/
        
        echo "📦 Complete SBOM package created: sbom-complete-${{ github.sha }}.tar.gz"

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [sbom-generation, docker-sbom, compliance-report]
    if: always() && (github.ref == 'refs/heads/main' || failure())
    
    steps:
    - name: Download artifacts for analysis
      uses: actions/download-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: sbom/

    - name: Analyze results and send notification
      run: |
        # Check if critical vulnerabilities were found
        critical_count=0
        if [ -d "sbom/vulnerabilities" ]; then
          critical_count=$(find sbom/vulnerabilities -name "*.json" -exec jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
        fi
        
        echo "Critical vulnerabilities found: $critical_count"
        
        # In a real implementation, send notifications to Slack, email, etc.
        if [ $critical_count -gt 0 ]; then
          echo "🚨 SECURITY ALERT: Critical vulnerabilities detected in SBOM scan"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          echo "Critical vulnerabilities: $critical_count"
        else
          echo "✅ SBOM scan completed successfully with no critical vulnerabilities"
        fi