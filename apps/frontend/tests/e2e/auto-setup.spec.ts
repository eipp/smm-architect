import { test, expect } from '@playwright/test';
import AxeBuilder from '@axe-core/playwright';

test.describe('Auto Setup Flow', () => {
  test('completes auto setup flow successfully', async ({ page }) => {
    // Navigate to onboard page
    await page.goto('/onboard')
    \n    // Step 1: Basic workspace info\n    await expect(page.locator('[data-testid=\"workspace-setup\"]')).toBeVisible()\n    \n    await page.fill('[data-testid=\"workspace-name\"]', 'Test Holiday Campaign')\n    await page.selectOption('[data-testid=\"primary-channel\"]', 'linkedin')\n    await page.click('[data-testid=\"continue-button\"]')\n    \n    // Step 2: OAuth connector setup\n    await expect(page.locator('[data-testid=\"connector-setup\"]')).toBeVisible()\n    \n    // Mock OAuth flow completion\n    await page.route('**/api/connectors/linkedin/callback', route => {\n      route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ \n          status: 'connected', \n          accountId: 'test-account',\n          accountName: 'Test Company'\n        })\n      })\n    })\n    \n    await page.click('[data-testid=\"connect-linkedin\"]')\n    \n    // Wait for connection success\n    await expect(page.locator('[data-testid=\"connection-success\"]')).toBeVisible()\n    await page.click('[data-testid=\"continue-button\"]')\n    \n    // Step 3: Review shadow run results\n    await expect(page.locator('[data-testid=\"shadow-run-results\"]')).toBeVisible()\n    \n    // Check that readiness score is displayed\n    await expect(page.locator('[data-testid=\"readiness-score\"]')).toBeVisible()\n    const readinessText = await page.textContent('[data-testid=\"readiness-score\"]')\n    expect(readinessText).toContain('%')\n    \n    // Check budget estimation\n    await expect(page.locator('[data-testid=\"budget-estimate\"]')).toBeVisible()\n    \n    // Complete setup\n    await page.click('[data-testid=\"complete-setup\"]')\n    \n    // Verify navigation to canvas\n    await expect(page).toHaveURL(/\\/canvas/)\n    await expect(page.locator('[data-testid=\"micro-graph\"]')).toBeVisible()\n  })\n  \n  test('handles OAuth connection errors gracefully', async ({ page }) => {\n    await page.goto('/onboard')\n    \n    // Fill basic info\n    await page.fill('[data-testid=\"workspace-name\"]', 'Test Campaign')\n    await page.selectOption('[data-testid=\"primary-channel\"]', 'linkedin')\n    await page.click('[data-testid=\"continue-button\"]')\n    \n    // Mock OAuth failure\n    await page.route('**/api/connectors/linkedin/callback', route => {\n      route.fulfill({\n        status: 400,\n        contentType: 'application/json',\n        body: JSON.stringify({ \n          error: 'OAuth connection failed',\n          message: 'Invalid credentials'\n        })\n      })\n    })\n    \n    await page.click('[data-testid=\"connect-linkedin\"]')\n    \n    // Should show error message\n    await expect(page.locator('[data-testid=\"connection-error\"]')).toBeVisible()\n    await expect(page.locator('text=OAuth connection failed')).toBeVisible()\n    \n    // Should have retry option\n    await expect(page.locator('[data-testid=\"retry-connection\"]')).toBeVisible()\n  })\n  \n  test('validates workspace name requirements', async ({ page }) => {\n    await page.goto('/onboard')\n    \n    // Try to continue without name\n    await page.click('[data-testid=\"continue-button\"]')\n    await expect(page.locator('text=Name is required')).toBeVisible()\n    \n    // Try with too short name\n    await page.fill('[data-testid=\"workspace-name\"]', 'AB')\n    await page.click('[data-testid=\"continue-button\"]')\n    await expect(page.locator('text=Name must be at least 3 characters')).toBeVisible()\n    \n    // Try with invalid characters\n    await page.fill('[data-testid=\"workspace-name\"]', 'Test<>Name')\n    await page.click('[data-testid=\"continue-button\"]')\n    await expect(page.locator('text=Name can only contain letters')).toBeVisible()\n    \n    // Valid name should work\n    await page.fill('[data-testid=\"workspace-name\"]', 'Valid Test Name')\n    await page.selectOption('[data-testid=\"primary-channel\"]', 'linkedin')\n    await page.click('[data-testid=\"continue-button\"]')\n    \n    // Should proceed to next step\n    await expect(page.locator('[data-testid=\"connector-setup\"]')).toBeVisible()\n  })\n  \n  test('supports multiple channel selection', async ({ page }) => {\n    await page.goto('/onboard')\n    \n    await page.fill('[data-testid=\"workspace-name\"]', 'Multi-Channel Campaign')\n    \n    // Select multiple channels\n    await page.check('[data-testid=\"channel-linkedin\"]')\n    await page.check('[data-testid=\"channel-twitter\"]')\n    await page.check('[data-testid=\"channel-facebook\"]')\n    \n    await page.click('[data-testid=\"continue-button\"]')\n    \n    // Should show setup for all selected channels\n    await expect(page.locator('[data-testid=\"connect-linkedin\"]')).toBeVisible()\n    await expect(page.locator('[data-testid=\"connect-twitter\"]')).toBeVisible()\n    await expect(page.locator('[data-testid=\"connect-facebook\"]')).toBeVisible()\n  })\n  \n  test('displays progress indicator throughout flow', async ({ page }) => {\n    await page.goto('/onboard')\n    \n    // Step 1: Should show progress 1/3\n    await expect(page.locator('[data-testid=\"progress-indicator\"]')).toContainText('1 of 3')\n    \n    // Fill and continue\n    await page.fill('[data-testid=\"workspace-name\"]', 'Progress Test')\n    await page.selectOption('[data-testid=\"primary-channel\"]', 'linkedin')\n    await page.click('[data-testid=\"continue-button\"]')\n    \n    // Step 2: Should show progress 2/3\n    await expect(page.locator('[data-testid=\"progress-indicator\"]')).toContainText('2 of 3')\n    \n    // Mock connection and continue\n    await page.route('**/api/connectors/linkedin/callback', route => {\n      route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify({ status: 'connected', accountId: 'test' })\n      })\n    })\n    \n    await page.click('[data-testid=\"connect-linkedin\"]')\n    await page.click('[data-testid=\"continue-button\"]')\n    \n    // Step 3: Should show progress 3/3\n    await expect(page.locator('[data-testid=\"progress-indicator\"]')).toContainText('3 of 3')\n  })\n  \n  test('allows users to go back to previous steps', async ({ page }) => {\n    await page.goto('/onboard')\n    \n    // Complete step 1\n    await page.fill('[data-testid=\"workspace-name\"]', 'Back Navigation Test')\n    await page.selectOption('[data-testid=\"primary-channel\"]', 'linkedin')\n    await page.click('[data-testid=\"continue-button\"]')\n    \n    // Should be on step 2\n    await expect(page.locator('[data-testid=\"connector-setup\"]')).toBeVisible()\n    \n    // Go back\n    await page.click('[data-testid=\"back-button\"]')\n    \n    // Should be back on step 1 with preserved data\n    await expect(page.locator('[data-testid=\"workspace-setup\"]')).toBeVisible()\n    await expect(page.locator('[data-testid=\"workspace-name\"]')).toHaveValue('Back Navigation Test')\n    await expect(page.locator('[data-testid=\"primary-channel\"]')).toHaveValue('linkedin')\n  })\n}"
