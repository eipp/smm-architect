version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:14-alpine
    container_name: smm-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/smm-architect/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smm-network

  redis:
    image: redis:7-alpine
    container_name: smm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - smm-network

  # Core Services
  smm-architect:
    build:
      context: .
      dockerfile: services/smm-architect/Dockerfile
    container_name: smm-architect-service
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - VAULT_URL=http://vault:8200
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/smm-architect/src:/app/src
      - smm_logs:/app/logs
    networks:
      - smm-network
    restart: unless-stopped

  toolhub:
    build:
      context: .
      dockerfile: services/toolhub/Dockerfile
    container_name: smm-toolhub
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - VAULT_URL=http://vault:8200
      - SENTRY_DSN=${SENTRY_DSN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/toolhub/src:/app/src
      - toolhub_logs:/app/logs
    networks:
      - smm-network
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: smm-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
      - NEXT_PUBLIC_TOOLHUB_URL=http://localhost:3001
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - smm-architect
      - toolhub
    volumes:
      - ./apps/frontend/src:/app/src
    networks:
      - smm-network
    restart: unless-stopped

  # Infrastructure Services
  vault:
    image: hashicorp/vault:1.15.2
    container_name: smm-vault
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-root-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
    networks:
      - smm-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: smm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - smm-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: smm-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - smm-network
    restart: unless-stopped

  # Development Tools
  mailhog:
    image: mailhog/mailhog:latest
    container_name: smm-mailhog
    ports:
      - "8025:8025"  # Web interface
      - "1025:1025"  # SMTP
    networks:
      - smm-network

  # Test Database (for integration tests)
  postgres-test:
    image: postgres:14-alpine
    container_name: smm-postgres-test
    environment:
      POSTGRES_DB: smm_test
      POSTGRES_USER: smm_test
      POSTGRES_PASSWORD: smm_test
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - smm-network
    profiles:
      - test

# Volumes
volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  vault_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  smm_logs:
    driver: local
  toolhub_logs:
    driver: local

# Networks
networks:
  smm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16